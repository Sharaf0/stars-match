{"version":3,"sources":["Utils.js","components/NumberComponent.js","components/NumbersComponent.js","components/StarComponent.js","components/StarsComponent.js","components/GameComponent.js","App.js","serviceWorker.js","index.js"],"names":["getFilledArray","length","a","index","push","getRandomSquares","size","height","width","squares","counter","point","x","Math","random","y","getRandomPoint","newSquare","left","top","some","s","s1","s2","r1","right","bottom","r2","squaresIntersects","Error","NumberComponent","props","useState","hovered","setHover","toggleHover","isHovered","divStyle","borderWidth","borderColor","borderStyle","margin","status","cursor","backgroundColor","className","style","onClick","onNumberClick","onMouseEnter","onMouseLeave","value","NumbersComponent","numbers","map","n","key","number","StarComponent","position","alt","src","StarsComponent","squareSize","starSize","numbersAndSquares","GameComponent","initialNotShownStarsCounts","gameLimit","initialNumbers","notShownStarsCounts","setNotShownStarsCounts","setNumbers","currentStarsCount","setCurrentStarsCount","setCurrentStarsCountWithNewValue","copyOfNotShownStarsCounts","init","_","without","floor","useEffect","restartGame","copyOfInitialNotShownStarsCounts","array","splice","removeRandomElements","textAlign","copyOfNumbers","findIndex","sumOfWrong","filter","reduce","sum","current","element","sumOfMarkedAndWrong","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20ee2c41.chunk.js","sourcesContent":["export const getFilledArray = (length) => {\r\n  let a = [];\r\n  for (let index = 0; index < length; index++) {\r\n    a.push(index + 1);\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction getRandomPoint(height, width) {\r\n  return {\r\n    x: Math.random() * width,\r\n    y: Math.random() * height\r\n  };\r\n}\r\n\r\nfunction rectanglesIntersect(r1, r2) {\r\n  return !(r2.left > r1.right ||\r\n    r2.right < r1.left ||\r\n    r2.top > r1.bottom ||\r\n    r2.bottom < r1.top);\r\n}\r\n\r\nfunction squaresIntersects(s1, s2, size) {\r\n  return rectanglesIntersect(\r\n    {\r\n      left: s1.left,\r\n      right: s1.left + size,\r\n      top: s1.top,\r\n      bottom: s1.top + size\r\n    }, {\r\n    left: s2.left,\r\n    right: s2.left + size,\r\n    top: s2.top,\r\n    bottom: s2.top + size\r\n  })\r\n}\r\n\r\nexport function removeRandomElements(array, n) {\r\n  while (n--) {\r\n    array.splice(Math.floor(Math.random() * array.length), 1);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function getRandomSquares(length, size, height, width) {\r\n  let squares = [];\r\n  let counter = 0;\r\n  while (squares.length < length) {\r\n    //TODO: Merge those two statements.\r\n    const point = getRandomPoint(height - size, width - size);\r\n    const newSquare = { left: point.x, top: point.y };\r\n    if (!squares.some(s => squaresIntersects(s, newSquare, size))) {\r\n      squares.push(newSquare);\r\n      counter = 0;\r\n    }\r\n    counter++;\r\n    if (counter === 1e6)\r\n      throw new Error(\"Infinite loop detected!\");\r\n  }\r\n  return squares;\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NumberComponent = (props) => {\r\n  const [hovered, setHover] = useState(false);\r\n\r\n  const toggleHover = (isHovered) => {\r\n    setHover(isHovered);\r\n  }\r\n\r\n  const divStyle = {\r\n    borderWidth: \"1px\",\r\n    borderColor: \"grey\",\r\n    borderStyle: \"solid\",\r\n    margin: \"1px\"\r\n  };\r\n\r\n  if (hovered) {\r\n    if (props.status === \"TAKEN\")\r\n      divStyle.cursor = \"no-drop\";\r\n    else\r\n      divStyle.cursor = \"pointer\";\r\n  }\r\n\r\n  switch (props.status) {\r\n    case \"TAKEN\":\r\n      divStyle.backgroundColor = \"lightgreen\";\r\n      break;\r\n    case \"MARKED\":\r\n      divStyle.backgroundColor = \"lightblue\";\r\n      break;\r\n    case \"WRONG\":\r\n      divStyle.backgroundColor = \"orangered\";\r\n      break;\r\n    case \"DEFAULT\":\r\n      divStyle.backgroundColor = \"transparent\";\r\n      break;\r\n    default:\r\n      throw new Error(`Number status ${props.status} is not considered as a valid status`);\r\n  }\r\n  return (\r\n    <div className=\"col-lg-3\"\r\n      style={divStyle}\r\n      onClick={() => props.onNumberClick(props)}\r\n      onMouseEnter={() => toggleHover(true)}\r\n      onMouseLeave={() => toggleHover(false)}\r\n    >\r\n      <h3>{props.value}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nNumberComponent.propTypes = {\r\n  status: PropTypes.string.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  onNumberClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default NumberComponent;","import React from 'react';\r\nimport NumberComponent from './NumberComponent';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NumbersComponent = (props) => {\r\n  return <div className=\"row\">\r\n    {props.numbers.map(n => <NumberComponent key={n.number} value={n.number} status={n.status} onNumberClick={props.onNumberClick}></NumberComponent>)}\r\n  </div>\r\n};\r\n\r\nNumbersComponent.propTypes = {\r\n  numbers: PropTypes.arrayOf(PropTypes.shape({\r\n    number: PropTypes.number.isRequired,\r\n    status: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  onNumberClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default NumbersComponent;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StarComponent = (props) => {\r\n  return (\r\n    <div style={{position: \"absolute\", top: props.top, left: props.left, height: props.size, width: props.size }}>\r\n      <img width={props.size} alt={props.value} src=\"star.png\" ></img>\r\n    </div>\r\n  );\r\n};\r\nStarComponent.propTypes = {\r\n  top: PropTypes.number.isRequired,\r\n  left: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  size: PropTypes.number.isRequired\r\n};\r\nexport default StarComponent;","import React from 'react';\r\nimport StarComponent from './StarComponent';\r\nimport { getFilledArray, getRandomSquares } from '../Utils';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StarsComponent = (props) => {\r\n  const divStyle = {\r\n    borderWidth: 1,\r\n    borderStyle: \"solid\",\r\n    borderColor: \"black\",\r\n    width: props.width,\r\n    height: props.height\r\n  };\r\n\r\n  const squareSize = props.starSize;\r\n  const numbers = getFilledArray(props.number);\r\n  const squares = getRandomSquares(props.number, squareSize, props.height - divStyle.borderWidth, props.width - divStyle.borderWidth);\r\n\r\n  let numbersAndSquares = [];\r\n  //TODO: Do that in a better way\r\n  for (let index = 0; index < numbers.length; index++) {\r\n    numbersAndSquares.push(\r\n      {\r\n        number: numbers[index],\r\n        left: squares[index].left,\r\n        top: squares[index].top\r\n      });\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\" style={divStyle} >\r\n        {numbersAndSquares.map(n =>\r\n          <StarComponent key={n.number} value={n.number} size={squareSize} top={n.top} left={n.left}>\r\n          </StarComponent>)}\r\n      </div>\r\n    </>)\r\n};\r\n\r\nStarsComponent.propTypes = {\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  number: PropTypes.number.isRequired,\r\n  starSize: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StarsComponent;","import React, { useState, useEffect } from \"react\";\r\nimport { getFilledArray, removeRandomElements } from '../Utils';\r\nimport NumbersComponent from \"./NumbersComponent\";\r\nimport StarsComponent from \"./StarsComponent\";\r\nimport _ from \"lodash\";\r\n\r\nconst GameComponent = () => {\r\n  //TODO: Move this Config to .json or so\r\n  const gameLimit = 12;\r\n  const starSize = 50;\r\n  const starsHeight = 400;\r\n  const starsWidth = 400;\r\n  const initialNotShownStarsCounts = getFilledArray(gameLimit + gameLimit / 2);\r\n  const initialNumbers = getFilledArray(gameLimit).map(n => ({ number: n, status: \"DEFAULT\" }));\r\n\r\n  //TODO: get the initial value differently.\r\n  const [notShownStarsCounts, setNotShownStarsCounts] = useState([]);\r\n  const [numbers, setNumbers] = useState();\r\n  const [currentStarsCount, setCurrentStarsCount] = useState();\r\n\r\n  //TODO: This function is a horror\r\n  const setCurrentStarsCountWithNewValue = (copyOfNotShownStarsCounts, init) => {\r\n    //TODO: Fix that\r\n    if (currentStarsCount !== -1 && init === false) {\r\n      copyOfNotShownStarsCounts = _.without(copyOfNotShownStarsCounts, currentStarsCount);\r\n    }\r\n    if (copyOfNotShownStarsCounts.length !== 0) {\r\n      const number = copyOfNotShownStarsCounts[Math.floor(Math.random() * copyOfNotShownStarsCounts.length)];\r\n      setCurrentStarsCount(number);\r\n    }\r\n    setNotShownStarsCounts(copyOfNotShownStarsCounts);\r\n  }\r\n\r\n  useEffect(() => {\r\n    restartGame();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);//TODO: Fix dependencies\r\n\r\n  //TODO: Is here the right place?\r\n  const onNumberClick = (number) => {\r\n    const copyOfNumbers = [...numbers];\r\n    switch (number.status) {\r\n      case \"TAKEN\":\r\n        return;\r\n      case \"MARKED\":\r\n        //Unmark the number\r\n        copyOfNumbers[_.findIndex(copyOfNumbers, n => n.number === number.value)].status = \"DEFAULT\";\r\n        setNumbers(copyOfNumbers);\r\n        return;\r\n      case \"WRONG\":\r\n        const sumOfWrong = copyOfNumbers\r\n          .filter(n => n.status === \"WRONG\")\r\n          .map(n => n.number)\r\n          .reduce((sum, current) => sum + current, 0) - number.value;\r\n        if (sumOfWrong === currentStarsCount) {\r\n          //TODO: Do that in a better way.\r\n          for (let index = 0; index < copyOfNumbers.length; index++) {\r\n            const element = copyOfNumbers[index];\r\n            if (element.status === \"WRONG\" && element.number !== number.value)\r\n              element.status = \"TAKEN\";\r\n            else if (element.number === number.value) {\r\n              element.status = \"DEFAULT\";\r\n            }\r\n          }\r\n          //TODO: Why Stars are rendered when I call that?\r\n          setNumbers(copyOfNumbers);\r\n          setCurrentStarsCountWithNewValue(notShownStarsCounts, false);\r\n          return;\r\n        }\r\n        if (sumOfWrong > currentStarsCount) {\r\n          copyOfNumbers[_.findIndex(copyOfNumbers, n => n.number === number.value)].status = \"DEFAULT\";\r\n          setNumbers(copyOfNumbers);\r\n        }\r\n        if (sumOfWrong < currentStarsCount) {\r\n          for (let index = 0; index < copyOfNumbers.length; index++) {\r\n            const element = copyOfNumbers[index];\r\n            if (element.status === \"WRONG\" && element.number !== number.value)\r\n              element.status = \"MARKED\";\r\n            else if (element.number === number.value) {\r\n              element.status = \"DEFAULT\";\r\n            }\r\n          }\r\n          setNumbers(copyOfNumbers);\r\n          return;\r\n        }\r\n        break;\r\n      case \"DEFAULT\":\r\n        const sumOfMarkedAndWrong = copyOfNumbers\r\n          .filter(n => n.status === \"MARKED\" || n.status === \"WRONG\")\r\n          .map(n => n.number)\r\n          .reduce((sum, current) => sum + current, 0) + number.value;\r\n        if (sumOfMarkedAndWrong === currentStarsCount) {\r\n          //TODO: Do that in a better way.\r\n          for (let index = 0; index < copyOfNumbers.length; index++) {\r\n            const element = copyOfNumbers[index];\r\n            if (element.status === \"MARKED\" || element.number === number.value)\r\n              element.status = \"TAKEN\";\r\n          }\r\n          //TODO: Why Stars are rendered when I call that?\r\n          setNumbers(copyOfNumbers);\r\n          setCurrentStarsCountWithNewValue(notShownStarsCounts, false);\r\n          return;\r\n        }\r\n        if (sumOfMarkedAndWrong > currentStarsCount) {\r\n          for (let index = 0; index < copyOfNumbers.length; index++) {\r\n            const element = copyOfNumbers[index];\r\n            if (element.status === \"MARKED\" || element.number === number.value)\r\n              element.status = \"WRONG\";\r\n          }\r\n          //TODO: Why Stars are rendered when I call that?\r\n          setNumbers(copyOfNumbers);\r\n          return;\r\n        }\r\n        if (sumOfMarkedAndWrong < currentStarsCount) {\r\n          if (_.some(copyOfNumbers, n => n.status === \"WRONG\")) {\r\n            //Mark number in numbers\r\n            copyOfNumbers[copyOfNumbers.findIndex(n => n.number === number.value)].status = \"WRONG\";\r\n          }\r\n          else {\r\n            copyOfNumbers[copyOfNumbers.findIndex(n => n.number === number.value)].status = \"MARKED\";\r\n          }\r\n          //TODO: Why Stars are rendered when I call that?\r\n          setNumbers(copyOfNumbers);\r\n          return;\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(`Number status ${number.status} is not considered as a valid status`);\r\n    }\r\n  }\r\n\r\n  const restartGame = () => {\r\n    let copyOfInitialNotShownStarsCounts = [...initialNotShownStarsCounts];\r\n    copyOfInitialNotShownStarsCounts = removeRandomElements(copyOfInitialNotShownStarsCounts, copyOfInitialNotShownStarsCounts.length - 5);\r\n    setNotShownStarsCounts(copyOfInitialNotShownStarsCounts);\r\n    setNumbers(initialNumbers);\r\n    setCurrentStarsCount(-1);\r\n    setCurrentStarsCountWithNewValue(copyOfInitialNotShownStarsCounts, true);\r\n  }\r\n\r\n  if (notShownStarsCounts.length === 0)\r\n    return <div style={{ textAlign: \"center\" }}>\r\n      You Won\r\n      <div>\r\n        <button onClick={restartGame}>Play again?</button>\r\n      </div>\r\n    </div>;\r\n\r\n  return <div className=\"container\">\r\n    <div className=\"row\">\r\n      <div style={{ textAlign: \"center\" }} className=\"col-lg-6\">\r\n        <StarsComponent number={currentStarsCount} height={starsHeight} width={starsWidth} starSize={starSize}></StarsComponent>\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }} className=\"col-lg-6\">\r\n        <NumbersComponent numbers={numbers} onNumberClick={(number) => onNumberClick(number)}></NumbersComponent>\r\n      </div>\r\n    </div>\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <span>Can't go further? </span>\r\n      <button onClick={restartGame}>Play again?</button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default GameComponent;","import React from 'react';\r\nimport GameComponent from \"./components/GameComponent\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <GameComponent></GameComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}